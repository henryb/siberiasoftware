package Siberia.tests;

import junit.framework.*;
import org.junit.Test;

public class ChessBoardTest extends TestCase{

/**
 * Test Case constructor
 * 
 * @param name java.lang.String
 */

public ChessBoardTest(String name) {
		super(name);
}

/**
 * ONE-TIME AUTOMATICALLY GENERATED CODE (WILL NOT BE REGENERATED)
 * 
 * @param args java.lang.String[]
 */
public static void main(String[] args) {
	junit.textui.TestRunner.run(Siberia.tests.ChessBoardTest.class);
}

/**
 * Sets up the fixture, for example, open a network connection.
 * This method is called before a test is executed.
 * 
 * @throws Exception
 */
protected void setUp() throws Exception {
}

/**
 * Tears down the fixture, for example, close a network connection.
 * This method is called after a test is executed.
 *
 * @throws Exception
 */
protected void tearDown() throws Exception {
}

/** 
 * Test the method APIs as defined by the class ChessBoard
 * 
 * Assets that represent use case scenarios by applying stimuli to one or more objects under test.
 * This asset has (11) step(s):
 * <ul>
 * <li>Test applyMove(int[],int[])</li>
 * <li>Test configureBoard()</li>
 * <li>Test convertMove()</li>
 * <li>Test decodeMove(String)</li>
 * <li>Test getPieceAt(int,int)</li>
 * <li>Test isGarbled(String)</li>
 * <li>Test isThereCheck(String)</li>
 * <li>Test isThereCheckMate(String)</li>
 * <li>Test printBoard()</li>
 * <li>Test stringToMove(String)</li>
 * <li>Test validateMove(int[],int[])</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void methodAPIs() throws java.lang.Throwable {
	
	// Method APIs:
	// Test the method APIs as defined by the class ChessBoard
	
	// Test applyMove(int[],int[]):
	// Test the method applyMove
	this.testApplyMoveIntInt();
	
	// Test configureBoard():
	// Test the method configureBoard
	this.testConfigureBoard();
	
	// Test convertMove():
	// Test the method convertMove
	this.testConvertMove();
	
	// Test decodeMove(String):
	// Test the method decodeMove
	this.testDecodeMoveString();
	
	// Test getPieceAt(int,int):
	// Test the method getPieceAt
	this.testGetPieceAtIntInt();
	
	// Test isGarbled(String):
	// Test the method isGarbled
	this.testIsGarbledString();
	
	// Test isThereCheck(String):
	// Test the method isThereCheck
	this.testIsThereCheckString();
	
	// Test isThereCheckMate(String):
	// Test the method isThereCheckMate
	this.testIsThereCheckMateString();
	
	// Test printBoard():
	// Test the method printBoard
	this.testPrintBoard();
	
	// Test stringToMove(String):
	// Test the method stringToMove
	this.testStringToMoveString();
	
	// Test validateMove(int[],int[]):
	// Test the method validateMove
	this.testValidateMoveIntInt();
}

/** 
 * Test the method applyMove
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>applyMove(int[],int[])</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testApplyMoveIntInt() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test applyMove(int[],int[]):
	// Test the method applyMove
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// applyMove(int[],int[]):
	// Apply the method applyMove as a stimulus to the  test instance
	subject.applyMove( new int[] {}, new int[] {});
	
	// Verify results:
	// Verify that sending applyMove to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method configureBoard
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>configureBoard()</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testConfigureBoard() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test configureBoard():
	// Test the method configureBoard
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// configureBoard():
	// Apply the method configureBoard as a stimulus to the  test instance
	subject.configureBoard();
	
	// Verify results:
	// Verify that sending configureBoard to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method convertMove
 * 
 * 
 * 
 * This asset has (1) step(s):
 * <ul>
 * <li>convertMove()</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testConvertMove() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	java.lang.String temp  =  null;
	
	// Test convertMove():
	// Test the method convertMove
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// convertMove():
	// Apply the method convertMove as a stimulus to the  test instance
	temp  =  subject.convertMove();
	
	// Postcondition validation for convertMove():
	 assertEquals("Postcondition validation for convertMove()", 
		temp, 
		"Abc");
}

/** 
 * Test the method decodeMove
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>decodeMove(String)</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testDecodeMoveString() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test decodeMove(String):
	// Test the method decodeMove
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// decodeMove(String):
	// Apply the method decodeMove as a stimulus to the  test instance
	subject.decodeMove("Abc");
	
	// Verify results:
	// Verify that sending decodeMove to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method getPieceAt
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>getPieceAt(int,int)</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testGetPieceAtIntInt() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test getPieceAt(int,int):
	// Test the method getPieceAt
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// getPieceAt(int,int):
	// Apply the method getPieceAt as a stimulus to the  test instance
	subject.getPieceAt(0,
	0);
	
	// Verify results:
	// Verify that sending getPieceAt to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method isGarbled
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>isGarbled(String)</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testIsGarbledString() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test isGarbled(String):
	// Test the method isGarbled
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// isGarbled(String):
	// Apply the method isGarbled as a stimulus to the  test instance
	subject.isGarbled("Abc");
	
	// Verify results:
	// Verify that sending isGarbled to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method isThereCheck
 * 
 * 
 * 
 * This asset has (1) step(s):
 * <ul>
 * <li>isThereCheck(String)</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testIsThereCheckString() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	boolean temp  =  false;
	
	// Test isThereCheck(String):
	// Test the method isThereCheck
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// isThereCheck(String):
	// Apply the method isThereCheck as a stimulus to the  test instance
	temp  =  subject.isThereCheck("Abc");
	
	// Postcondition validation for isThereCheck(String):
	 assertEquals("Postcondition validation for isThereCheck(String)", 
		temp, 
		true);
}

/** 
 * Test the method isThereCheckMate
 * 
 * 
 * 
 * This asset has (1) step(s):
 * <ul>
 * <li>isThereCheckMate(String)</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testIsThereCheckMateString() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	boolean temp  =  false;
	
	// Test isThereCheckMate(String):
	// Test the method isThereCheckMate
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// isThereCheckMate(String):
	// Apply the method isThereCheckMate as a stimulus to the  test instance
	temp  =  subject.isThereCheckMate("Abc");
	
	// Postcondition validation for isThereCheckMate(String):
	 assertEquals("Postcondition validation for isThereCheckMate(String)", 
		temp, 
		true);
}

/** 
 * Test the method printBoard
 * 
 * 
 * 
 * This asset has (2) step(s):
 * <ul>
 * <li>printBoard()</li>
 * <li>Verify results</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testPrintBoard() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Test printBoard():
	// Test the method printBoard
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// printBoard():
	// Apply the method printBoard as a stimulus to the  test instance
	subject.printBoard();
	
	// Verify results:
	// Verify that sending printBoard to  returns the expected result
	 assertEquals("Verify results", 
		subject, 
		this.asset_provideAChessBoardUsingNoArguments());
}

/** 
 * Test the method stringToMove
 * 
 * 
 * 
 * This asset has (1) step(s):
 * <ul>
 * <li>stringToMove(String)</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testStringToMoveString() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	int[][] temp  =  null;
	
	// Test stringToMove(String):
	// Test the method stringToMove
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// stringToMove(String):
	// Apply the method stringToMove as a stimulus to the  test instance
	
	//temp  =  subject.stringToMove("Abc");
	
	// Postcondition validation for stringToMove(String):
	 assertEquals("Postcondition validation for stringToMove(String)", 
		temp, 
		"Abc");
}

/** 
 * Test the method validateMove
 * 
 * 
 * 
 * This asset has (1) step(s):
 * <ul>
 * <li>validateMove(int[],int[])</li>
 * </ul>
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public void testValidateMoveIntInt() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	boolean temp  =  false;
	
	// Test validateMove(int[],int[]):
	// Test the method validateMove
	
	// Create test subject:
	// Create a test instance of ChessBoard as the receiver for this test
	subject  =  this.asset_provideAChessBoardUsingNoArguments();
	
	// validateMove(int[],int[]):
	// Apply the method validateMove as a stimulus to the  test instance
	//temp  =  subject.validateMove( new int[] {}, new int[] {});
	
	// Postcondition validation for validateMove(int[],int[]):
	 assertEquals("Postcondition validation for validateMove(int[],int[])", 
		temp, 
		true);
}

/** 
 * Use the [ChessBoard()] constructor to create a configured instance of this class
 * 
 * Assets that are set up for the purpose of returning an object in a particular state are known as an object provider.
 * 
 * 
 * Creation date: (3/13/2010 1:15:01 AM)
 * @author Generated by SilverMark's Test Mentor Version 5.4
 */
public Siberia.ChessBoard asset_provideAChessBoardUsingNoArguments() throws java.lang.Throwable {
	Siberia.ChessBoard subject  =  null;
	
	// Provide a ChessBoard using no arguments ():
	// Use the [ChessBoard()] constructor to create a configured instance of this class
	
	// Constructor step for Provide a ChessBoard using no arguments ():
	subject  =   new Siberia.ChessBoard();
	return subject;
}
}